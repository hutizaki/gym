@namespace gymtrack.Components
@using System.Collections.Generic
@using System.Linq
@using gymtrack.Models
@using gymtrack.Services
@inject IWorkoutService WorkoutService
@inject IJSRuntime JS

<div class="calendar-container" @ref="calendarElement" @onscroll="HandleScroll">
    <div class="months-wrapper">
        @foreach (var month in LoadedMonths.OrderBy(m => m.Date))
        {
            <MonthComponent Month="month" 
                          OnDayClick="HandleDayClick" 
                          Today="DateTime.Today" />
        }
    </div>
</div>

@code {
    [Parameter] public EventCallback<DateTime> OnDaySelected { get; set; }
    
    private ElementReference calendarElement;
    private List<MonthData> LoadedMonths = new();
    private HashSet<string> LoadedMonthKeys = new();
    private DateTime CurrentDate = DateTime.Today;
    private Timer? scrollTimer;
    private bool isLoading = false;
    private const int MaxMonthsToLoad = 12; // Limit total months loaded
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeCalendar();
        }
    }
    
    private async Task InitializeCalendar()
    {
        // Load initial months: 2 before current, current, 3 after
        for (int i = -2; i <= 3; i++)
        {
            var date = new DateTime(CurrentDate.Year, CurrentDate.Month, 1).AddMonths(i);
            await CreateMonth(date);
        }
        
        StateHasChanged();
        
        // Scroll to current month after render
        await Task.Delay(100);
        await ScrollToCurrentMonth();
    }
    
    private async Task CreateMonth(DateTime date)
    {
        var monthKey = $"{date.Year}-{date.Month}";
        
        if (LoadedMonthKeys.Contains(monthKey))
            return;
            
        var monthData = new MonthData
        {
            Date = date,
            Key = monthKey,
            Days = GenerateMonthDays(date),
            Events = await LoadEventsForMonth(date)
        };
        
        LoadedMonths.Add(monthData);
        LoadedMonthKeys.Add(monthKey);
    }
    
    private List<DayData> GenerateMonthDays(DateTime monthDate)
    {
        var days = new List<DayData>();
        var firstDay = new DateTime(monthDate.Year, monthDate.Month, 1);
        var lastDay = firstDay.AddMonths(1).AddDays(-1);
        
        // Start from the beginning of the week containing the first day
        var startDate = firstDay.AddDays(-(int)firstDay.DayOfWeek);
        
        // Generate 6 weeks worth of days (42 days)
        for (int i = 0; i < 42; i++)
        {
            var currentDate = startDate.AddDays(i);
            days.Add(new DayData
            {
                Date = currentDate,
                IsCurrentMonth = currentDate.Month == monthDate.Month,
                IsToday = currentDate.Date == DateTime.Today
            });
        }
        
        return days;
    }
    
    private async Task<Dictionary<DateTime, List<EventData>>> LoadEventsForMonth(DateTime monthDate)
    {
        var events = new Dictionary<DateTime, List<EventData>>();
        var monthEvents = await WorkoutService.GetWorkoutsForMonthAsync(monthDate);
        
        foreach (var evt in monthEvents)
        {
            if (!events.ContainsKey(evt.Date))
                events[evt.Date] = new List<EventData>();
                
            events[evt.Date].Add(evt);
        }
        
        return events;
    }
    
    private async Task HandleScroll()
    {
        if (isLoading) return;
        
        // Debounce scroll events
        scrollTimer?.Dispose();
        scrollTimer = new Timer(async _ => await CheckForNewMonthsToLoad(), null, 200, Timeout.Infinite);
    }
    
    private async Task CheckForNewMonthsToLoad()
    {
        if (isLoading) return;
        
        await InvokeAsync(async () =>
        {
            try
            {
                isLoading = true;
                
                // Check if we've reached the maximum number of months
                if (LoadedMonths.Count >= MaxMonthsToLoad)
                {
                    // Remove oldest months if we're loading new ones
                    var scrollInfo = await JS.InvokeAsync<ScrollInfo>("getScrollInfo", calendarElement);
                    
                    if (scrollInfo.ScrollTop < 100)
                    {
                        // Remove last month if loading previous months
                        var lastMonth = LoadedMonths.OrderByDescending(m => m.Date).First();
                        LoadedMonths.Remove(lastMonth);
                        LoadedMonthKeys.Remove(lastMonth.Key);
                    }
                    else if (scrollInfo.ScrollHeight - scrollInfo.ClientHeight - scrollInfo.ScrollTop < 100)
                    {
                        // Remove first month if loading next months
                        var firstMonth = LoadedMonths.OrderBy(m => m.Date).First();
                        LoadedMonths.Remove(firstMonth);
                        LoadedMonthKeys.Remove(firstMonth.Key);
                    }
                }
                
                var visibleMonths = LoadedMonths.OrderBy(m => m.Date).ToList();
                
                // Load previous month if near top
                if (visibleMonths.Any())
                {
                    var firstMonth = visibleMonths.First();
                    var prevMonth = firstMonth.Date.AddMonths(-1);
                    await CreateMonth(prevMonth);
                }
                
                // Load next month if near bottom
                if (visibleMonths.Any())
                {
                    var lastMonth = visibleMonths.Last();
                    var nextMonth = lastMonth.Date.AddMonths(1);
                    await CreateMonth(nextMonth);
                }
                
                StateHasChanged();
            }
            finally
            {
                isLoading = false;
            }
        });
    }
    
    private async Task ScrollToCurrentMonth()
    {
        try
        {
            var currentMonthElement = await JS.InvokeAsync<ElementReference>("getElementByMonth", 
                $"{CurrentDate.Year}-{CurrentDate.Month}");
                
            await JS.InvokeVoidAsync("scrollToElement", currentMonthElement);
        }
        catch
        {
            // Element not found, ignore
        }
    }
    
    private async Task HandleDayClick(DateTime selectedDate)
    {
        await OnDaySelected.InvokeAsync(selectedDate);
    }
    
    public void Dispose()
    {
        scrollTimer?.Dispose();
    }
    
    public class ScrollInfo
    {
        public double ScrollTop { get; set; }
        public double ScrollHeight { get; set; }
        public double ClientHeight { get; set; }
    }
} 